# -*- coding: utf-8 -*-
"""Auto hyperparameter tuning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a2oKESYiM1KOWvtVEhFjfR7p6Xru4lWN
"""

features = len(dataframe. columns)
values = []
for i in range(1,features):
  for x in range(1,15):
    model = DecisionTreeClassifier(random_state=42,criterion='gini',max_features=i, max_depth = x)
    model.fit(trainData, trainLabels)
    predictions = model.predict(testData)
    val = f"Result for value of max_features {i} and max_depth ",x
    val1 =("Training result", model.score(trainData, trainLabels))
    val2 = ("Testing result",model.score(testData, testLabels,))
    values.append((val, val1, val2))
print(values)

weights = ("uniform","distance")
values = []
for i in range(1,9):
  for x in weights:
    model = KNeighborsClassifier(n_neighbors=i,weights= x)
    model.fit(trainData, trainLabels)
    val = f"Result for value of max_features {i} and max_depth {x}"
    val1 = model.score(trainData, trainLabels)
    val2 = model.score(testData, testLabels)
    predictions = model.predict(testData)
    values.append((val, val1, val2))
print(values)

kernels = ("linear", "poly", "sigmoid", "rbf")
# "linear", "poly", "sigmoid", "rbf" , "precomputed")
values = []

for i in kernels:
  model = SVC(kernel=i,C=1)
  model.fit(trainData, trainLabels)
  val = f"Kernal = {i}"
  val1 = model.score(trainData, trainLabels)
  val2 = model.score(testData, testLabels)
  values.append((val, val1, val2))
  print(i)
print(values)